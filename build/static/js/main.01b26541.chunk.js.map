{"version":3,"sources":["ColorModeSwitcher.js","components/header.js","svgs/icons.js","components/socialIcons.js","components/layout.js","components/hero.js","App.js","serviceWorker.js","reportWebVitals.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","onClick","icon","Header","justifyContent","alignItems","pt","px","Logo","h","w","bgColor","borderRadius","paddingTop","paddingLeft","fontFamily","fontWeight","_hover","cursor","transition","Nav","pr","name","href","map","i","key","ml","display","MailIcon","createIcon","displayName","path","fill","stroke","stroke-linecap","stroke-linejoin","stroke-width","d","GithubIcon","viewBox","CodepenIcon","SocialIcons","iconColor","customTheme","colors","themeBlack","spacing","style","boxSize","mainBlue","transform","Layout","children","as","position","left","bottom","flexDirection","mt","borderLeft","borderColor","Hero","buttonBg","lineHeight","letterSpacing","py","backgroundColor","border","merge","theme","fonts","themeMono","heading","lightBlue","console","log","App","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.01b26541.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/core';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import React from 'react'\nimport {\n    Box,\n    List,\n    ListItem,\n    Link,\n    Flex\n} from '@chakra-ui/core'\nimport { ColorModeSwitcher } from '../ColorModeSwitcher';\n\n\nconst Header = () => {\n    return (\n\n            <Flex\n            justifyContent=\"space-between\"\n            alignItems='center'\n            pt={6}\n            px={16}\n\n            >\n            \n                <Logo />\n\n                <Flex alignItems='center'>\n\n                    <Nav />\n\n                    <ColorModeSwitcher />\n\n                </Flex>\n\n            </Flex>\n\n    )\n}\nexport default Header\n\nconst Logo = () => {\n\n    return (\n        <Box\n        h=\"51px\"\n        w=\"60px\"\n        bgColor=\"mainBlue\"\n        borderRadius=\"5px\"\n        paddingTop=\"20px\"\n        paddingLeft=\"10px\"\n        fontFamily=\"themeMono\"\n        color=\"#fff\"\n        fontSize=\"1.1rem\"\n        fontWeight=\"bold\"\n        _hover={{bgColor: '#ff8075'}}\n        cursor=\"pointer\"\n        transition=\"0.2s all ease\"\n        >\n            J\n        </Box>\n    )\n}\n\nconst Nav = () => {\n    const navItems = [\n        {\n            name: 'Work',\n            href: '/'\n        },\n        {\n            name: 'Bookshelf',\n            href: '/'\n        },\n        {\n            name: 'Contact',\n            href: '/'\n        },\n    ]\n\n    return (\n        <List\n        fontFamily=\"themeMono\"\n        pr={10}\n        >\n        {navItems.map(i => (\n            <Link\n            key={i}\n            href={i.href}\n            ml={8}\n            >\n                <ListItem\n                display=\"inline-block\"\n                _hover={{color: '#7d7f81'}}\n                >\n                    {i.name}\n                </ListItem>\n            </Link>\n        ))}\n        </List>\n    )\n}","import React from 'react'\nimport { createIcon } from \"@chakra-ui/icon\"\n\nexport const MailIcon = createIcon({\n    displayName: \"mailIcon\",\n    path: (\n        <path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\n    ),\n  })\n\n  export const GithubIcon = createIcon({\n    displayName: \"GithubIcon\",\n    viewBox: \"0 0 496 512\",\n    path: (\n        <path fill=\"currentColor\" d=\"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z\" />\n    ),\n  })\n\n  export const CodepenIcon = createIcon({\n    displayName: \"CodepenIcon\",\n    viewBox: \"0 0 512 512\",\n    path: (\n        <path fill=\"currentColor\" d=\"M502.285 159.704l-234-156c-7.987-4.915-16.511-4.96-24.571 0l-234 156C3.714 163.703 0 170.847 0 177.989v155.999c0 7.143 3.714 14.286 9.715 18.286l234 156.022c7.987 4.915 16.511 4.96 24.571 0l234-156.022c6-3.999 9.715-11.143 9.715-18.286V177.989c-.001-7.142-3.715-14.286-9.716-18.285zM278 63.131l172.286 114.858-76.857 51.429L278 165.703V63.131zm-44 0v102.572l-95.429 63.715-76.857-51.429L234 63.131zM44 219.132l55.143 36.857L44 292.846v-73.714zm190 229.715L61.714 333.989l76.857-51.429L234 346.275v102.572zm22-140.858l-77.715-52 77.715-52 77.715 52-77.715 52zm22 140.858V346.275l95.429-63.715 76.857 51.429L278 448.847zm190-156.001l-55.143-36.857L468 219.132v73.714z\" />\n    ),\n  })","import React from 'react'\nimport { VStack, useColorModeValue } from '@chakra-ui/core'\nimport { MailIcon, GithubIcon, CodepenIcon } from '../svgs/icons'\nimport { customTheme } from '../App.js'\n\n\nconst SocialIcons = () => {\n\n    const iconColor = useColorModeValue(customTheme.colors.themeBlack, \"white\")\n\n    return (\n        <VStack spacing={10}>\n            <GithubIcon\n            style={{transition: \"0.3s ease all\"}}\n            boxSize={5}\n            color={iconColor}\n            _hover={{color: customTheme.colors.mainBlue, transform: \"translateY(-3px)\", transition: \"0.3s ease all\"}}\n            />\n\n            <CodepenIcon\n            style={{transition: \"0.3s ease all\"}}\n            boxSize={5}\n            color={iconColor}\n            _hover={{color: customTheme.colors.mainBlue, transform: \"translateY(-3px)\", transition: \"0.3s ease all\"}}\n            />\n            \n            <MailIcon\n            style={{transition: \"0.3s ease all\"}}\n            boxSize={5}\n            color={iconColor}\n            _hover={{color: customTheme.colors.mainBlue, transform: \"translateY(-3px)\", transition: \"0.3s ease all\"}}\n            />\n    \n        </VStack>\n    )\n}\n\nexport default SocialIcons","import React from 'react'\nimport Header from './header'\nimport { Box, Flex } from '@chakra-ui/core'\nimport './layout.css'\nimport SocialIcons from './socialIcons'\nimport { customTheme } from '../App'\n\nconst Layout = ({ children }) => {\n    return (\n        <>\n            <Header />\n            \n            <Box\n            as='main'\n            pt='5rem'\n            px='15vw'\n            h=\"200vh\"\n            >\n                {children}\n            </Box>\n\n            <Flex\n            position=\"fixed\"\n            left={16}\n            bottom={0}\n            alignItems=\"center\"\n            flexDirection=\"column\"\n            >\n                <SocialIcons />\n\n                <Box\n                h={16}\n                w={0}\n                mt={10}\n                borderLeft=\"3px solid\"\n                borderColor={customTheme.colors.mainBlue}\n                />\n            </Flex>\n        </>\n    )\n}\n\nexport default Layout\n","import React from 'react'\nimport {\n    Text, Button, useColorModeValue\n} from '@chakra-ui/core'\n\n\nconst Hero = () => {\n    \n    const buttonBg = useColorModeValue(\"#ffffffeb\", \"#1A202C\")\n\n    return (\n        <>\n            <Text\n            fontFamily='themeMono'\n            fontSize='1.4rem'\n            >\n                Hi! 🥑\n            </Text>\n\n            <Text\n            fontFamily='heading'\n            fontSize='5.35rem'\n            lineHeight='5rem'\n            letterSpacing='-1px'\n            py='2rem'\n            >\n                I'm Joel Milani. <br />\n                I Make Websites and Other Things.\n            </Text>\n\n            <Text\n            fontFamily='themeMono'\n            fontSize='1.4rem'\n            >\n                I'm a frontend developer in Lakewood, Ohio. Get in touch if you'd like to work together - I'm open to freelance projects and full-time opportunities.\n            </Text>\n\n            <Button\n            fontFamily='themeMono'\n            backgroundColor={buttonBg}\n            border='2px solid'\n            borderColor='mainBlue'\n            color='lightBlue'\n            py={8}\n            px={16}\n            _hover={{backgroundColor: 'mainBlue', color: '#fff'}}\n            mt={8}\n            \n            >\n                Let's Chat!\n            </Button>\n        </>\n    )\n}\n\nexport default Hero\n","import React from 'react';\nimport {\n  ChakraProvider,\n  CSSReset,\n} from '@chakra-ui/core';\nimport theme from '@chakra-ui/theme';\nimport { merge } from \"@chakra-ui/utils\"\nimport Layout from './components/layout'\nimport Hero from './components/hero';\n\nexport const customTheme = merge(theme, {\n  fonts: {\n    themeMono: \"Space Mono,monospace\",\n    heading: \"'Tinos', serif\",\n  },\n  colors: {\n    mainBlue: '#5393fe',\n    lightBlue: '#73abff',\n    themeBlack: '#1A202C'\n  }\n})\n\nconsole.log(customTheme.colors.mainBlue)\n\nfunction App() {\n  return (\n    <ChakraProvider theme={customTheme}>\n      <CSSReset />\n\n      <Layout>\n\n        <Hero />\n\n      </Layout>\n\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}